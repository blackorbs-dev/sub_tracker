// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../features/shared/data/user_entity.dart';
import '../features/subscription/data/entity/location_entity.dart';
import '../features/subscription/data/entity/subscription_entity.dart';
import '../features/wallet/data/entity/transaction_entity.dart';
import '../features/wallet/data/entity/wallet_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 2284185839732206391),
    name: 'SubscriptionEntity',
    lastPropertyId: const obx_int.IdUid(10, 1160421623030205960),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4547533733438922823),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 109349266368894422),
        name: 'startDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4557620139128668954),
        name: 'isActive',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2825504155213193591),
        name: 'userId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 3293145501846231325),
        relationTarget: 'UserEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7352776400841167892),
        name: 'dbPlan',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4215574829732930127),
        name: 'dbBillingType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7113103446610014779),
        name: 'locationId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 258773617853319458),
        relationTarget: 'LocationEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5490094217754223780),
        name: 'dbBillingMethod',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 1160421623030205960),
        name: 'endDate',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 4586568370039030264),
    name: 'TransactionEntity',
    lastPropertyId: const obx_int.IdUid(7, 1970515054192049214),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9164214920391441882),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2898130400040282352),
        name: 'amount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1086052963478872951),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4528277126102437510),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1471016733796330449),
        name: 'walletId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 7984047558645741036),
        relationTarget: 'WalletEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3893161898695168961),
        name: 'dbStatus',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1970515054192049214),
        name: 'dbType',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 1549719352726365344),
    name: 'UserEntity',
    lastPropertyId: const obx_int.IdUid(5, 8521159399026970931),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8857464671755793383),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1750873255786670637),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1063592030662200018),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7389311645863739484),
        name: 'password',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8521159399026970931),
        name: 'walletId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 5905135413411489425),
        relationTarget: 'WalletEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 3841488743167013771),
        name: 'subscriptions',
        targetId: const obx_int.IdUid(1, 2284185839732206391),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 2573770856253852801),
    name: 'WalletEntity',
    lastPropertyId: const obx_int.IdUid(3, 8966368250801693930),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1299693340638874414),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4034837265348218827),
        name: 'balance',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8966368250801693930),
        name: 'userId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 6090700000921499391),
        relationTarget: 'UserEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 3506487815683845604),
        name: 'transactions',
        targetId: const obx_int.IdUid(2, 4586568370039030264),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 5437293505860261517),
    name: 'LocationEntity',
    lastPropertyId: const obx_int.IdUid(6, 337946690423837759),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7981884918857172429),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3611350905408430747),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5905397887448144470),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 337946690423837759),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(5, 5437293505860261517),
    lastIndexId: const obx_int.IdUid(5, 258773617853319458),
    lastRelationId: const obx_int.IdUid(2, 3506487815683845604),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      7939121332815444472,
      1805084963447297860,
      314592210023181642,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    SubscriptionEntity: obx_int.EntityDefinition<SubscriptionEntity>(
      model: _entities[0],
      toOneRelations: (SubscriptionEntity object) => [
        object.user,
        object.location,
      ],
      toManyRelations: (SubscriptionEntity object) => {},
      getId: (SubscriptionEntity object) => object.id,
      setId: (SubscriptionEntity object, int id) {
        object.id = id;
      },
      objectToFB: (SubscriptionEntity object, fb.Builder fbb) {
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addInt64(2, object.startDate.millisecondsSinceEpoch);
        fbb.addBool(3, object.isActive);
        fbb.addInt64(4, object.user.targetId);
        fbb.addInt64(5, object.dbPlan);
        fbb.addInt64(6, object.dbBillingType);
        fbb.addInt64(7, object.location.targetId);
        fbb.addInt64(8, object.dbBillingMethod);
        fbb.addInt64(9, object.endDate.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final isActiveParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final startDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final endDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
        );
        final object =
            SubscriptionEntity(
                id: idParam,
                isActive: isActiveParam,
                startDate: startDateParam,
                endDate: endDateParam,
              )
              ..dbPlan = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                14,
              )
              ..dbBillingType = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                16,
              )
              ..dbBillingMethod = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                20,
              );
        object.user.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.user.attach(store);
        object.location.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.location.attach(store);
        return object;
      },
    ),
    TransactionEntity: obx_int.EntityDefinition<TransactionEntity>(
      model: _entities[1],
      toOneRelations: (TransactionEntity object) => [object.wallet],
      toManyRelations: (TransactionEntity object) => {},
      getId: (TransactionEntity object) => object.id,
      setId: (TransactionEntity object, int id) {
        object.id = id;
      },
      objectToFB: (TransactionEntity object, fb.Builder fbb) {
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addFloat64(1, object.amount);
        fbb.addOffset(2, descriptionOffset);
        fbb.addInt64(3, object.date.millisecondsSinceEpoch);
        fbb.addInt64(4, object.wallet.targetId);
        fbb.addInt64(5, object.dbStatus);
        fbb.addInt64(6, object.dbType);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final amountParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final object =
            TransactionEntity(
                id: idParam,
                amount: amountParam,
                description: descriptionParam,
                date: dateParam,
              )
              ..dbStatus = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                14,
              )
              ..dbType = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                16,
              );
        object.wallet.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.wallet.attach(store);
        return object;
      },
    ),
    UserEntity: obx_int.EntityDefinition<UserEntity>(
      model: _entities[2],
      toOneRelations: (UserEntity object) => [object.wallet],
      toManyRelations: (UserEntity object) => {
        obx_int.RelInfo<UserEntity>.toMany(1, object.id): object.subscriptions,
      },
      getId: (UserEntity object) => object.id,
      setId: (UserEntity object, int id) {
        object.id = id;
      },
      objectToFB: (UserEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final emailOffset = fbb.writeString(object.email);
        final passwordOffset = fbb.writeString(object.password);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, emailOffset);
        fbb.addOffset(3, passwordOffset);
        fbb.addInt64(4, object.wallet.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final passwordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = UserEntity(
          id: idParam,
          name: nameParam,
          email: emailParam,
          password: passwordParam,
        );
        object.wallet.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.wallet.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<UserEntity>(
          object.subscriptions,
          store,
          obx_int.RelInfo<UserEntity>.toMany(1, object.id),
        );
        return object;
      },
    ),
    WalletEntity: obx_int.EntityDefinition<WalletEntity>(
      model: _entities[3],
      toOneRelations: (WalletEntity object) => [object.user],
      toManyRelations: (WalletEntity object) => {
        obx_int.RelInfo<WalletEntity>.toMany(2, object.id): object.transactions,
      },
      getId: (WalletEntity object) => object.id,
      setId: (WalletEntity object, int id) {
        object.id = id;
      },
      objectToFB: (WalletEntity object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addFloat64(1, object.balance);
        fbb.addInt64(2, object.user.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final balanceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = WalletEntity(id: idParam, balance: balanceParam);
        object.user.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.user.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<WalletEntity>(
          object.transactions,
          store,
          obx_int.RelInfo<WalletEntity>.toMany(2, object.id),
        );
        return object;
      },
    ),
    LocationEntity: obx_int.EntityDefinition<LocationEntity>(
      model: _entities[4],
      toOneRelations: (LocationEntity object) => [],
      toManyRelations: (LocationEntity object) => {},
      getId: (LocationEntity object) => object.id,
      setId: (LocationEntity object, int id) {
        object.id = id;
      },
      objectToFB: (LocationEntity object, fb.Builder fbb) {
        final addressOffset = fbb.writeString(object.address);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(3, addressOffset);
        fbb.addFloat64(4, object.latitude);
        fbb.addFloat64(5, object.longitude);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final latitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final longitudeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = LocationEntity(
          id: idParam,
          latitude: latitudeParam,
          longitude: longitudeParam,
          address: addressParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [SubscriptionEntity] entity fields to define ObjectBox queries.
class SubscriptionEntity_ {
  /// See [SubscriptionEntity.id].
  static final id = obx.QueryIntegerProperty<SubscriptionEntity>(
    _entities[0].properties[0],
  );

  /// See [SubscriptionEntity.startDate].
  static final startDate = obx.QueryDateProperty<SubscriptionEntity>(
    _entities[0].properties[1],
  );

  /// See [SubscriptionEntity.isActive].
  static final isActive = obx.QueryBooleanProperty<SubscriptionEntity>(
    _entities[0].properties[2],
  );

  /// See [SubscriptionEntity.user].
  static final user = obx.QueryRelationToOne<SubscriptionEntity, UserEntity>(
    _entities[0].properties[3],
  );

  /// See [SubscriptionEntity.dbPlan].
  static final dbPlan = obx.QueryIntegerProperty<SubscriptionEntity>(
    _entities[0].properties[4],
  );

  /// See [SubscriptionEntity.dbBillingType].
  static final dbBillingType = obx.QueryIntegerProperty<SubscriptionEntity>(
    _entities[0].properties[5],
  );

  /// See [SubscriptionEntity.location].
  static final location =
      obx.QueryRelationToOne<SubscriptionEntity, LocationEntity>(
        _entities[0].properties[6],
      );

  /// See [SubscriptionEntity.dbBillingMethod].
  static final dbBillingMethod = obx.QueryIntegerProperty<SubscriptionEntity>(
    _entities[0].properties[7],
  );

  /// See [SubscriptionEntity.endDate].
  static final endDate = obx.QueryDateProperty<SubscriptionEntity>(
    _entities[0].properties[8],
  );
}

/// [TransactionEntity] entity fields to define ObjectBox queries.
class TransactionEntity_ {
  /// See [TransactionEntity.id].
  static final id = obx.QueryIntegerProperty<TransactionEntity>(
    _entities[1].properties[0],
  );

  /// See [TransactionEntity.amount].
  static final amount = obx.QueryDoubleProperty<TransactionEntity>(
    _entities[1].properties[1],
  );

  /// See [TransactionEntity.description].
  static final description = obx.QueryStringProperty<TransactionEntity>(
    _entities[1].properties[2],
  );

  /// See [TransactionEntity.date].
  static final date = obx.QueryDateProperty<TransactionEntity>(
    _entities[1].properties[3],
  );

  /// See [TransactionEntity.wallet].
  static final wallet = obx.QueryRelationToOne<TransactionEntity, WalletEntity>(
    _entities[1].properties[4],
  );

  /// See [TransactionEntity.dbStatus].
  static final dbStatus = obx.QueryIntegerProperty<TransactionEntity>(
    _entities[1].properties[5],
  );

  /// See [TransactionEntity.dbType].
  static final dbType = obx.QueryIntegerProperty<TransactionEntity>(
    _entities[1].properties[6],
  );
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// See [UserEntity.id].
  static final id = obx.QueryIntegerProperty<UserEntity>(
    _entities[2].properties[0],
  );

  /// See [UserEntity.name].
  static final name = obx.QueryStringProperty<UserEntity>(
    _entities[2].properties[1],
  );

  /// See [UserEntity.email].
  static final email = obx.QueryStringProperty<UserEntity>(
    _entities[2].properties[2],
  );

  /// See [UserEntity.password].
  static final password = obx.QueryStringProperty<UserEntity>(
    _entities[2].properties[3],
  );

  /// See [UserEntity.wallet].
  static final wallet = obx.QueryRelationToOne<UserEntity, WalletEntity>(
    _entities[2].properties[4],
  );

  /// see [UserEntity.subscriptions]
  static final subscriptions =
      obx.QueryRelationToMany<UserEntity, SubscriptionEntity>(
        _entities[2].relations[0],
      );
}

/// [WalletEntity] entity fields to define ObjectBox queries.
class WalletEntity_ {
  /// See [WalletEntity.id].
  static final id = obx.QueryIntegerProperty<WalletEntity>(
    _entities[3].properties[0],
  );

  /// See [WalletEntity.balance].
  static final balance = obx.QueryDoubleProperty<WalletEntity>(
    _entities[3].properties[1],
  );

  /// See [WalletEntity.user].
  static final user = obx.QueryRelationToOne<WalletEntity, UserEntity>(
    _entities[3].properties[2],
  );

  /// see [WalletEntity.transactions]
  static final transactions =
      obx.QueryRelationToMany<WalletEntity, TransactionEntity>(
        _entities[3].relations[0],
      );
}

/// [LocationEntity] entity fields to define ObjectBox queries.
class LocationEntity_ {
  /// See [LocationEntity.id].
  static final id = obx.QueryIntegerProperty<LocationEntity>(
    _entities[4].properties[0],
  );

  /// See [LocationEntity.address].
  static final address = obx.QueryStringProperty<LocationEntity>(
    _entities[4].properties[1],
  );

  /// See [LocationEntity.latitude].
  static final latitude = obx.QueryDoubleProperty<LocationEntity>(
    _entities[4].properties[2],
  );

  /// See [LocationEntity.longitude].
  static final longitude = obx.QueryDoubleProperty<LocationEntity>(
    _entities[4].properties[3],
  );
}
